// Function to perform partitioning
function partition(arr, low, high) {
    let pivot = arr[high]; // Choosing the last element as the pivot
    let i = low - 1; // Index of the smaller element

    for (let j = low; j < high; j++) {
        // If current element is smaller than or equal to the pivot
        if (arr[j] <= pivot) {
            i++; // Increment the index of the smaller element
            // Swap arr[i] and arr[j]
            let temp = arr[i];
            arr[i] = arr[j];
            arr[j] = temp;
        }
    }

    // Swap arr[i + 1] and arr[high] (or pivot)
    let temp = arr[i + 1];
    arr[i + 1] = arr[high];
    arr[high] = temp;

    return i + 1; // Return the partitioning index
}

// Function to implement quick sort
function quickSort(arr, low, high) {
    if (low < high) {
        // Partition the array
        let pi = partition(arr, low, high);

        // Recursively sort elements before and after partition
        quickSort(arr, low, pi - 1);
        quickSort(arr, pi + 1, high);
    }
}

// Example usage
let arr = [10, 7, 8, 9, 1, 5];
let n = arr.length;

quickSort(arr, 0, n - 1);
console.log("Sorted array:", arr); // Output: [1, 5, 7, 8, 9, 10]
